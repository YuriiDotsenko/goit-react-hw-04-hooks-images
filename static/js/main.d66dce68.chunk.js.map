{"version":3,"sources":["components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Modal/Modal.js","services/image-service.js","App.js","index.js"],"names":["Searchbar","onFormSubmit","useState","query","setQuery","className","onSubmit","event","preventDefault","type","autoComplete","autoFocus","placeholder","onChange","target","value","ImageGalleryItem","handleImageClick","webformatURL","largeImageURL","src","alt","onClick","ImageGallery","images","map","id","Button","onButton","Modal","toggleModal","children","rootModal","useRef","document","querySelector","handleEscape","useCallback","code","useEffect","window","addEventListener","removeEventListener","createPortal","currentTarget","current","imagesApi","fetchImages","currentQuery","currentPage","axios","get","then","data","hits","App","setCurrentQuery","setCurrentPage","setImages","isLoading","setIsLoading","showModal","setShowModal","bigImage","setBigImage","imagesResponse","prevImages","finally","prevShowModal","length","color","height","width","timeout","prevCurrentPage","scrollTo","top","documentElement","scrollHeight","behavior","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d66dce68.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({ onFormSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInput = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    onFormSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"SearchForm\" onSubmit={handleFormSubmit}>\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n\n        <input\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          onChange={handleInput}\n          value={query}\n        />\n      </form>\n    </header>\n  );\n};\n\nSearchbar.propTypes = {\n  onFormSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import React from 'react';\n\nconst ImageGalleryItem = ({\n  handleImageClick,\n  webformatURL,\n  largeImageURL,\n}) => {\n  const onImageClick = src => {\n    handleImageClick(src);\n  };\n\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        src={webformatURL}\n        alt=\"\"\n        className=\"ImageGalleryItem-image\"\n        onClick={() => onImageClick(largeImageURL)}\n      />\n    </li>\n  );\n};\n\nexport default ImageGalleryItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageGalleryItem from '../ImageGalleryItem';\n\nconst ImageGallery = ({ images, handleImageClick }) => (\n  <ul className=\"ImageGallery\">\n    {images.map(({ id, webformatURL, largeImageURL }) => (\n      <ImageGalleryItem\n        handleImageClick={handleImageClick}\n        key={id}\n        largeImageURL={largeImageURL}\n        webformatURL={webformatURL}\n      />\n    ))}\n  </ul>\n);\n\nImageGallery.propTypes = {\n  images: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number.isRequired,\n      webformatURL: PropTypes.string.isRequired,\n      largeImageURL: PropTypes.string.isRequired,\n    }),\n  ),\n  handleImageClick: PropTypes.func.isRequired,\n};\n\nexport default ImageGallery;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onButton }) => (\n  <button className=\"Button\" type=\"button\" onClick={onButton}>\n    Load more\n  </button>\n);\n\nButton.propTypes = {\n  onButton: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import React, { useEffect, useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport './Modal.css';\nimport { createPortal } from 'react-dom';\n\nconst Modal = ({ toggleModal, children }) => {\n  const rootModal = useRef(document.querySelector('#modal-root'));\n\n  const handleEscape = useCallback(\n    event => {\n      if (event.code === 'Escape') {\n        toggleModal();\n      }\n    },\n    [toggleModal],\n  );\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleEscape);\n\n    return () => {\n      window.removeEventListener('keydown', handleEscape);\n    };\n  }, [handleEscape]);\n\n  const handleBackdrop = event => {\n    if (event.target === event.currentTarget) {\n      toggleModal();\n    }\n  };\n\n  return createPortal(\n    <div className=\"Backdrop\" onClick={handleBackdrop}>\n      <div className=\"Content\">{children}</div>\n    </div>,\n    rootModal.current,\n  );\n};\n\nModal.propTypes = {\n  toggleModal: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n};\nexport default Modal;\n","import axios from 'axios';\n\nconst fetchImages = ({ currentQuery, currentPage = '1' }) =>\n  axios\n    .get(\n      `https://pixabay.com/api/?q=${currentQuery}&page=${currentPage}&key=21856946-e54e51c03adb2efa9c5f465ca&image_type=photo&orientation=horizontal&per_page=12\n`,\n    )\n    .then(({ data }) => data.hits);\n\nconst imagesApi = {\n  fetchImages,\n};\n\nexport default imagesApi;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\nimport Button from './components/Button';\nimport Modal from './components/Modal';\nimport imagesApi from './services/image-service';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport Loader from 'react-loader-spinner';\n\nconst App = () => {\n  const [currentQuery, setCurrentQuery] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [images, setImages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [bigImage, setBigImage] = useState(null);\n\n  useEffect(() => {\n    populateImages();\n  }, [currentQuery, currentPage]);\n\n  const onFormSubmit = query => {\n    setCurrentQuery(query);\n    setCurrentPage(1);\n    setImages([]);\n  };\n\n  function populateImages() {\n    setIsLoading(true);\n    imagesApi\n      .fetchImages({ currentQuery, currentPage })\n      .then(imagesResponse => {\n        // setCurrentPage(prevCurrentPage => prevCurrentPage + 1);\n        setImages(prevImages => [\n          ...prevImages,\n          ...imagesResponse.map(({ id, webformatURL, largeImageURL }) => ({\n            id,\n            webformatURL,\n            largeImageURL,\n          })),\n        ]);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }\n\n  const handleMoreClick = () => {\n    setCurrentPage(prevCurrentPage => prevCurrentPage + 1);\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    });\n  };\n  const handleImageClick = src => {\n    setBigImage(src);\n    setShowModal(true);\n  };\n  const toggleModal = event => {\n    setShowModal(prevShowModal => !prevShowModal);\n  };\n\n  return (\n    <div>\n      {showModal && (\n        <Modal toggleModal={toggleModal}>\n          <img src={bigImage} alt=\"\" />\n        </Modal>\n      )}\n      <Searchbar onFormSubmit={onFormSubmit} />\n      {images.length > 0 && (\n        <>\n          <ImageGallery handleImageClick={handleImageClick} images={images} />\n          {isLoading ? (\n            <Loader\n              type=\"Circles\"\n              color=\"#bd2745\"\n              height={70}\n              width={70}\n              timeout={3000}\n              className=\"Spinner\"\n            />\n          ) : (\n            <Button onButton={handleMoreClick} />\n          )}\n        </>\n      )}\n      {isLoading && images.length === 0 && (\n        <Loader\n          type=\"Circles\"\n          color=\"#bd2745\"\n          height={70}\n          width={70}\n          timeout={3000}\n          className=\"Spinner\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}